---
title: Empirical Dynamic Modelling
subtitle: Automatic Causal Analysis and Forecasting<br>TSF 2022
author: Dr Patrick Laub
date: 2 December 2022
date-format: long
format:
  revealjs:
    theme: [serif, custom.scss]
    controls: true
    controls-tutorial: true
    logo: unsw-logo.svg
    title-slide-attributes:
      data-background-image: unsw-yellow-shape.png
      data-background-size: contain !important
    slide-number: c/t
    strip-comments: true
    margin: 0.2
    chalkboard:
      boardmarker-width: 5
      grid: false
    include-before: <div class="line right"></div>
    footer: Patrick Laub, Time-Series and Forecasting Symposium, University of Sydney
highlight-style: breeze
execute:
  echo: true
---

## Plan

1. Introduction
2. A magic trick (Taken's theorem)
3. Examples
	1. Causal inference
	2. Prediction
4. Software packages

## Taken's Theorem

## Key idea

If $x$ causes $y$, then information about $x$ is somehow embedded in $y$.

By observing $y$, we should be able to (roughly) forecast $x$.

By observing more of $y$ (more "training data"), do our forecasts of $x$ become more accurate?

## About me

- Uni Melbourne

## Fish brains

Keichi work

## Stata package {.smaller}

<br>
<div style="border: 3px dashed #555"><img src="stata-journal-paper-title.png" /></div>
<br>

::: columns
::: column
Jinjing Li<br>
University of Canberra

George Sugihara<br>
University of California San Diego
:::
::: column
Michael J. Zyphur<br>
University of Queensland

Patrick J. Laub<br>
University of NSW
:::
:::

## Stata package

<iframe src="https://edm-developers.github.io/EDM/" width="100%" height="600" style="border:none;">
</iframe>

## R package

<iframe src="https://edm-developers.github.io/fastEDM/" width="100%" height="600" style="border:none;">
</iframe>


## Sydney house price forecasting

```{python}
import fastEDM
dir(fastEDM)
```

## Package features

- Fast, optimised multithreaded C++ code
- Easy to use automated analysis
- Handles panel data
- Handles irregularly sampled time series / missing data
- Highly "vectorised" (7 for loops deep)
- GPU acceleration